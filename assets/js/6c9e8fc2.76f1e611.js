"use strict";(self.webpackChunkdynamode_docs=self.webpackChunkdynamode_docs||[]).push([[930],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>c});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),d=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=d(t.components);return a.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),m=d(n),c=r,y=m["".concat(s,".").concat(c)]||m[c]||p[c]||i;return n?a.createElement(y,o(o({ref:e},u),{},{components:n})):a.createElement(y,o({ref:e},u))}));function c(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(7294),r=n(6010);const i="tabItem_Ymn6";function o(t){let{children:e,hidden:n,className:o}=t;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},e)}},5488:(t,e,n)=>{n.d(e,{Z:()=>c});var a=n(7462),r=n(7294),i=n(6010),o=n(2389),l=n(7392),s=n(7094),d=n(2466);const u="tabList__CuJ",p="tabItem_LNqP";function m(t){var e;const{lazy:n,block:o,defaultValue:m,values:c,groupId:y,className:k}=t,h=r.Children.map(t.children,(t=>{if((0,r.isValidElement)(t)&&"value"in t.props)return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=c??h.map((t=>{let{props:{value:e,label:n,attributes:a}}=t;return{value:e,label:n,attributes:a}})),b=(0,l.l)(N,((t,e)=>t.value===e.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===m?m:m??(null==(e=h.find((t=>t.props.default)))?void 0:e.props.value)??h[0].props.value;if(null!==g&&!N.some((t=>t.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${N.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:v}=(0,s.U)(),[C,T]=(0,r.useState)(g),w=[],{blockElementScrollPositionUntilNextRender:D}=(0,d.o5)();if(null!=y){const t=f[y];null!=t&&t!==C&&N.some((e=>e.value===t))&&T(t)}const K=t=>{const e=t.currentTarget,n=w.indexOf(e),a=N[n].value;a!==C&&(D(e),T(a),null!=y&&v(y,String(a)))},O=t=>{var e;let n=null;switch(t.key){case"ArrowRight":{const e=w.indexOf(t.currentTarget)+1;n=w[e]??w[0];break}case"ArrowLeft":{const e=w.indexOf(t.currentTarget)-1;n=w[e]??w[w.length-1];break}}null==(e=n)||e.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},k)},N.map((t=>{let{value:e,label:n,attributes:o}=t;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===e?0:-1,"aria-selected":C===e,key:e,ref:t=>w.push(t),onKeyDown:O,onFocus:K,onClick:K},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":C===e})}),n??e)}))),n?(0,r.cloneElement)(h.filter((t=>t.props.value===C))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((t,e)=>(0,r.cloneElement)(t,{key:e,hidden:t.props.value!==C})))))}function c(t){const e=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(e)},t))}},6360:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),i=n(5488),o=n(5162);const l={title:"Transactions | Dynamode",description:"Transactions",sidebar_label:"Transactions",hide_title:!0},s="Transactions",d={unversionedId:"guide/transactions",id:"guide/transactions",title:"Transactions | Dynamode",description:"Transactions",source:"@site/docs/guide/transactions.mdx",sourceDirName:"guide",slug:"/guide/transactions",permalink:"/dynamode/docs/guide/transactions",draft:!1,editUrl:"https://github.com/blazejkustra/dynamode/tree/master/docs/docs/guide/transactions.mdx",tags:[],version:"current",frontMatter:{title:"Transactions | Dynamode",description:"Transactions",sidebar_label:"Transactions",hide_title:!0},sidebar:"sidebar",previous:{title:"Scan",permalink:"/dynamode/docs/guide/scan"},next:{title:"Settings",permalink:"/dynamode/docs/guide/settings"}},u={},p=[{value:"<code>transactionGet(transactions, options?)</code>",id:"transactiongettransactions-options",level:2},{value:"Description",id:"description",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Examples",id:"examples",level:3},{value:"<code>transactionWrite(transactions, options?)</code>",id:"transactionwritetransactions-options",level:2},{value:"Description",id:"description-1",level:3},{value:"Arguments",id:"arguments-1",level:3},{value:"Examples",id:"examples-1",level:3}],m={toc:p};function c(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"transactions"},"Transactions"),(0,r.kt)("p",null,"Transactions are all or nothing, meaning the entire transaction will succeed, or the entire transaction will fail. In the event the transaction fails, state of the database will be the same as if the transaction did not take place. You can also run transaction across multiple tables at once."),(0,r.kt)("h2",{id:"transactiongettransactions-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"transactionGet(transactions, options?)")),(0,r.kt)("h3",{id:"description"},"Description"),(0,r.kt)("p",null,"This function is used to get multiple items in a single transaction. It uses the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html"},"TransactGetItems DynamoDB operation"),"."),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"transactions")),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Array<Entity.transactionGet>")," - Array of get operations generated with ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/entity/methods#entitytransactiongetprimarykey-options"},(0,r.kt)("inlineCode",{parentName:"a"},"Entity.transactionGet(primaryKey, options?)"))," method."),(0,r.kt)("p",null,"You can add optional ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"options"))," parameter that is an object. The table below represents options that you can pass in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"return")),(0,r.kt)("td",{parentName:"tr",align:null},"What the method should return. For ",(0,r.kt)("inlineCode",{parentName:"td"},"'default'")," method returns initialized classes with retrieved data. For ",(0,r.kt)("inlineCode",{parentName:"td"},"'input'")," method returns prepared DynamoDB input command and no request is made to DynamoDB (method no longer returns a promise). For ",(0,r.kt)("inlineCode",{parentName:"td"},"'output'")," method returns the bare output from DynamoDB operation."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'default'")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"'input'")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"'output'")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'default'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"throwOnNotFound")),(0,r.kt)("td",{parentName:"tr",align:null},"By default Dynamode will throw an error in case an item was not found.  If you want to prevent throwing errors when items are not found set ",(0,r.kt)("inlineCode",{parentName:"td"},"throwOnNotFound")," prop to ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"extraInput")),(0,r.kt)("td",{parentName:"tr",align:null},"Extra input that is passed to TransactGetItems DynamoDB operation. Use it only in case that you know what are you are doing as it may override other properties passed to DynamoDB operation."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-dynamodb/interfaces/transactgetitemscommandinput.html"},(0,r.kt)("inlineCode",{parentName:"a"},"TransactGetItemsCommandInput"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"default",label:"return: 'default'",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const transactions = await transactionGet(\n  [\n    KeyValue.transactionGet({ key: 'key1' }), \n    User.transactionGet({ partitionKey: '1', sortKey: 'blazej' }),\n  ]\n);\n// OR \nconst transactions = await transactionGet(\n  [\n    KeyValue.transactionGet({ key: 'key1' }), \n    User.transactionGet({ partitionKey: '1', sortKey: 'blazej' }),\n  ],\n  {\n    return: 'default'\n  }\n);\n// OUTPUT:\n// {\n//   items: [\n//     KeyValue {\n//       dynamodeEntity: 'KeyValue',\n//       key: 'key1',\n//       value: [Object]\n//     },\n//     User {\n//       dynamodeEntity: 'User',\n//       partitionKey: '1',\n//       sortKey: 'blazej',\n//       username: 'blazej',\n//       email: 'blazej@gmail.com',\n//       age: 18,\n//       friends: [Array],\n//       config: [Object]\n//     }\n//   ],\n//   count: 2\n// }\n"))),(0,r.kt)(o.Z,{value:"input",label:"return: 'input'",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const input = transactionGet(\n  [\n    KeyValue.transactionGet({ key: 'key1' }), \n    User.transactionGet({ partitionKey: '1', sortKey: 'blazej' }),\n  ],\n  {\n    return: 'input'\n  },\n);\n// OUTPUT:\n// {\n//   TransactItems: [\n//     { Get: [Object] },\n//     { Get: [Object] }\n//   ]\n// }\n"))),(0,r.kt)(o.Z,{value:"output",label:"return: 'output'",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const output = await transactionGet(\n  [\n    KeyValue.transactionGet({ key: 'key1' }), \n    User.transactionGet({ partitionKey: '1', sortKey: 'blazej' }),\n  ],\n  {\n    return: 'output'\n  },\n);\n// OUTPUT:\n// {\n//   '$metadata': {\n//     ...\n//   },\n//   ConsumedCapacity: undefined,\n//   Responses: [ { Item: [Object] }, { Item: [Object] } ]\n// }\n")))),(0,r.kt)("h2",{id:"transactionwritetransactions-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"transactionWrite(transactions, options?)")),(0,r.kt)("h3",{id:"description-1"},"Description"),(0,r.kt)("p",null,"This function is used to insert/update/delete multiple items in a single transaction. It uses the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems DynamoDB operation"),"."),(0,r.kt)("h3",{id:"arguments-1"},"Arguments"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"transactions")),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Array<Entity.transactionPut | Entity.transactionCreate | Entity.transactionUpdate | Entity.transactionDelete | Entity.transactionCondition>")," - Array of operations generated with methods that are described below:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/methods#entitytransactionputitem-options"},(0,r.kt)("inlineCode",{parentName:"a"},"Entity.transactionPut(item, options?)"))),(0,r.kt)("td",{parentName:"tr",align:null},"Insert an item to DynamoDB.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/methods#entitytransactioncreateitem-options"},(0,r.kt)("inlineCode",{parentName:"a"},"Entity.transactionCreate(item, options?)"))),(0,r.kt)("td",{parentName:"tr",align:null},"Insert an item to DynamoDB (without overwrite).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/methods#entitytransactionupdateprimarykey-props-options"},(0,r.kt)("inlineCode",{parentName:"a"},"Entity.transactionUpdate(primaryKey, props, options?)"))),(0,r.kt)("td",{parentName:"tr",align:null},"Update an item in DynamoDB.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/methods#entitytransactiondeleteprimarykey-options"},(0,r.kt)("inlineCode",{parentName:"a"},"Entity.transactionDelete(primaryKey, options?)"))),(0,r.kt)("td",{parentName:"tr",align:null},"Delete an item in DynamoDB.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/methods#entitytransactionconditionprimarykey-conditioninstance"},(0,r.kt)("inlineCode",{parentName:"a"},"Entity.transactionCondition(primaryKey, conditionInstance)"))),(0,r.kt)("td",{parentName:"tr",align:null},"Condition for the transaction.")))),(0,r.kt)("p",null,"You can add optional ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"options"))," parameter that is an object. The table below represents options that you can pass in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"return")),(0,r.kt)("td",{parentName:"tr",align:null},"What the method should return. For ",(0,r.kt)("inlineCode",{parentName:"td"},"'default'")," method returns inserted/updated/deleted classes. For ",(0,r.kt)("inlineCode",{parentName:"td"},"'input'")," method returns prepared DynamoDB input command and no request is made to DynamoDB (method no longer returns a promise). For ",(0,r.kt)("inlineCode",{parentName:"td"},"'output'")," method returns the bare output from DynamoDB operation."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'default'")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"'input'")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"'output'")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'default'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"idempotencyKey")),(0,r.kt)("td",{parentName:"tr",align:null},"Providing a ",(0,r.kt)("inlineCode",{parentName:"td"},"idempotencyKey")," makes the call idempotent, meaning that multiple identical calls have the same effect as one single call. It uses DynamoDB's ",(0,r.kt)("inlineCode",{parentName:"td"},"ClientRequestToken"),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"extraInput")),(0,r.kt)("td",{parentName:"tr",align:null},"Extra input that is passed to TransactWriteItems DynamoDB operation. Use it only in case that you know what are you are doing as it may override other properties passed to DynamoDB operation."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-dynamodb/interfaces/transactwriteitemscommandinput.html"},(0,r.kt)("inlineCode",{parentName:"a"},"TransactWriteItemsCommandInput"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,r.kt)("h3",{id:"examples-1"},"Examples"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"default",label:"return: 'default'",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const transactions = await transactionWrite(\n  [\n    User.transactionUpdate(\n      { partitionKey: '1', sortKey: 'blazej' },\n      {\n        set: {\n          age: 18,\n        },\n      },\n    ),\n    KeyValue.transactionPut(\n      new KeyValue({\n        key: 'key2',\n        value: { test: 'test2' },\n      }),\n    ),\n    KeyValue.transactionCreate(\n      new KeyValue({\n        key: 'key3',\n        value: { test: 'test3' },\n      }),\n    ),\n    KeyValue.transactionDelete({ key: 'key4' }),\n    KeyValue.transactionCondition({ key: 'key5' }, KeyValue.condition().attribute('key').eq('key5')),\n  ],\n);\n// OR\nconst transactions = await transactionWrite(\n  [\n    User.transactionUpdate(\n      { partitionKey: '1', sortKey: 'blazej' },\n      {\n        set: {\n          age: 18,\n        },\n      },\n    ),\n    KeyValue.transactionPut(\n      new KeyValue({\n        key: 'key2',\n        value: { test: 'test2' },\n      }),\n    ),\n    KeyValue.transactionCreate(\n      new KeyValue({\n        key: 'key3',\n        value: { test: 'test3' },\n      }),\n    ),\n    KeyValue.transactionDelete({ key: 'key4' }),\n    KeyValue.transactionCondition({ key: 'key5' }, KeyValue.condition().attribute('key').eq('key5')),\n  ],\n  { return: 'default' },\n);\n// OUTPUT:\n// {\n//   items: [\n//     KeyValue {\n//       dynamodeEntity: 'KeyValue',\n//       key: 'key2',\n//       value: [Object]\n//     },\n//     KeyValue {\n//       dynamodeEntity: 'KeyValue',\n//       key: 'key3',\n//       value: [Object]\n//     }\n//   ],\n//   count: 2\n// }\n"))),(0,r.kt)(o.Z,{value:"input",label:"return: 'input'",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const input = transactionWrite(\n  [\n    User.transactionUpdate(\n      { partitionKey: '1', sortKey: 'blazej' },\n      {\n        set: {\n          age: 18,\n        },\n      },\n    ),\n    KeyValue.transactionPut(\n      new KeyValue({\n        key: 'key2',\n        value: { test: 'test2' },\n      }),\n    ),\n    KeyValue.transactionCreate(\n      new KeyValue({\n        key: 'key3',\n        value: { test: 'test3' },\n      }),\n    ),\n    KeyValue.transactionDelete({ key: 'key4' }),\n    KeyValue.transactionCondition({ key: 'key5' }, KeyValue.condition().attribute('key').eq('key5')),\n  ],\n  { return: 'input' },\n);\n// OUTPUT:\n// {\n//   TransactItems: [\n//     { Update: [Object] },\n//     { Put: [Object] },\n//     { Put: [Object] },\n//     { Delete: [Object] },\n//     { ConditionCheck: [Object] }\n//   ],\n//   ClientRequestToken: undefined\n// }\n"))),(0,r.kt)(o.Z,{value:"output",label:"return: 'output'",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const output = await transactionWrite(\n  [\n    User.transactionUpdate(\n      { partitionKey: '1', sortKey: 'blazej' },\n      {\n        set: {\n          age: 18,\n        },\n      },\n    ),\n    KeyValue.transactionPut(\n      new KeyValue({\n        key: 'key2',\n        value: { test: 'test2' },\n      }),\n    ),\n    KeyValue.transactionCreate(\n      new KeyValue({\n        key: 'key3',\n        value: { test: 'test3' },\n      }),\n    ),\n    KeyValue.transactionDelete({ key: 'key4' }),\n    KeyValue.transactionCondition({ key: 'key5' }, KeyValue.condition().attribute('key').eq('key5')),\n  ],\n  { return: 'output' },\n);\n// OUTPUT:\n// {\n//   '$metadata': {\n//     ...\n//   },\n//   ConsumedCapacity: undefined,\n//   ItemCollectionMetrics: undefined\n// }\n")))))}c.isMDXComponent=!0}}]);