"use strict";(self.webpackChunkdynamode_docs=self.webpackChunkdynamode_docs||[]).push([[896],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>k});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),d=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},s=function(t){var e=d(t.components);return n.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,p=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),m=d(a),k=r,N=m["".concat(p,".").concat(k)]||m[k]||u[k]||i;return a?n.createElement(N,o(o({ref:e},s),{},{components:a})):n.createElement(N,o({ref:e},s))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:r,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5374:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const i={title:"Decorators | Dynamode",description:"Decorators",sidebar_label:"Decorators",hide_title:!0},o="Decorators",l={unversionedId:"guide/entity/decorators",id:"guide/entity/decorators",title:"Decorators | Dynamode",description:"Decorators",source:"@site/docs/guide/entity/decorators.mdx",sourceDirName:"guide/entity",slug:"/guide/entity/decorators",permalink:"/dynamode/docs/guide/entity/decorators",draft:!1,editUrl:"https://github.com/blazejkustra/dynamode/tree/master/docs/docs/guide/entity/decorators.mdx",tags:[],version:"current",frontMatter:{title:"Decorators | Dynamode",description:"Decorators",sidebar_label:"Decorators",hide_title:!0},sidebar:"sidebar",previous:{title:"Methods",permalink:"/dynamode/docs/guide/entity/methods"},next:{title:"Modeling",permalink:"/dynamode/docs/guide/entity/modeling"}},p={},d=[{value:"<code>register(value)</code>",id:"registervalue",level:2},{value:"<code>primaryPartitionKey(type, options?)</code>",id:"primarypartitionkeytype-options",level:2},{value:"<code>primarySortKey(type, options?)</code>",id:"primarysortkeytype-options",level:2},{value:"<code>gsiPartitionKey(type, indexName, options?)</code>",id:"gsipartitionkeytype-indexname-options",level:2},{value:"<code>gsiSortKey(type, indexName, options?)</code>",id:"gsisortkeytype-indexname-options",level:2},{value:"<code>lsiSortKey(type, indexName, options?)</code>",id:"lsisortkeytype-indexname-options",level:2},{value:"<code>attribute(type, options?)</code>",id:"attributetype-options",level:2},{value:"<code>createdAt(type, options?)</code>",id:"createdattype-options",level:2},{value:"<code>updatedAt(type, options?)</code>",id:"updatedattype-options",level:2},{value:"<code>prefix(value)</code>",id:"prefixvalue",level:2},{value:"<code>suffix(value)</code>",id:"suffixvalue",level:2}],s={toc:d};function u(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"decorators"},"Decorators"),(0,r.kt)("p",null,"Decorators are crucial for modelling  entities. Dynamode uses them to bind model attributes with DynamoDB tables."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Decorators are a language feature which hasn\u2019t yet been fully ratified into the JavaScript specification - ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#experimentalDecorators"},"source"),". "),(0,r.kt)("p",{parentName:"admonition"},"Add following lines in ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," in order to use decorators with Typescript:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  "compilerOptions": {\n    ...\n    "experimentalDecorators": true,\n    ...\n  }\n}\n'))),(0,r.kt)("p",null,"To see real examples of decorators in use - check out ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/entity/modeling"},"modeling")," page."),(0,r.kt)("h2",{id:"registervalue"},(0,r.kt)("inlineCode",{parentName:"h2"},"register(value)")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"register(value)")," is required in every entity.")),(0,r.kt)("p",null,"Every model that inherits ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," has to be registered with this decorator. It is used to tag the entity for Dynamode internal use."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"value: DynamoDB")," - DynamoDB instance that you can set up with Dynamode ",(0,r.kt)("inlineCode",{parentName:"p"},"Settings")," class "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const ddb = Settings.ddb();\n\n@register(ddb)\nclass YourModel extends Entity<Keys>(tableName: string) { \n  ...\n}\n")),(0,r.kt)("h2",{id:"primarypartitionkeytype-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"primaryPartitionKey(type, options?)")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"primaryPartitionKey(type, options?)")," is required in every entity.")),(0,r.kt)("p",null,"This decorator is used to tag the partition key attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"type: String | Number")," - Data type of the attribute."),(0,r.kt)("p",null,"In case ",(0,r.kt)("inlineCode",{parentName:"p"},"type: String")," is passed, you can add optional ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," parameter that is an object. The table below represents options that you can pass in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#prefixvalue"},"prefix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suffix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#suffixvalue"},"suffix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class YourModel extends Entity<Keys>(tableName: string) { \n  ...\n  @primaryPartitionKey(String)\n  PK: string;\n  ...\n}\n")),(0,r.kt)("h2",{id:"primarysortkeytype-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"primarySortKey(type, options?)")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"primarySortKey(type, options?)")," is required in entities that belongs to table with composite primary key.")),(0,r.kt)("p",null,"This decorator is used to tag the sort key attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"type: String | Number")," - Data type of the attribute."),(0,r.kt)("p",null,"In case ",(0,r.kt)("inlineCode",{parentName:"p"},"type: String")," is passed, you can add optional ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," parameter that is an object. The table below represents options that you can pass in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#prefixvalue"},"prefix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suffix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#suffixvalue"},"suffix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class YourModel extends Entity<Keys>(tableName: string) { \n  ...\n  @primarySortKey(String)\n  SK: string;\n  ...\n}\n")),(0,r.kt)("h2",{id:"gsipartitionkeytype-indexname-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"gsiPartitionKey(type, indexName, options?)")),(0,r.kt)("p",null,"This decorator is used to tag a global secondary index partition key attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"type: String | Number")," - Data type of the attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"indexName: string")," - Name of the index for the partition key."),(0,r.kt)("p",null,"In case ",(0,r.kt)("inlineCode",{parentName:"p"},"type: String")," is passed, you can add optional ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," parameter that is an object. The table below represents options that you can pass in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#prefixvalue"},"prefix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suffix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#suffixvalue"},"suffix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class YourModel extends Entity<Keys>(tableName: string) { \n  ...\n  @gsiPartitionKey(String)\n  GSI_PK: string;\n  ...\n}\n")),(0,r.kt)("h2",{id:"gsisortkeytype-indexname-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"gsiSortKey(type, indexName, options?)")),(0,r.kt)("p",null,"This decorator is used to tag a global secondary index sort key attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"type: String | Number")," - Data type of the attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"indexName: string")," - Name of the index for the sort key."),(0,r.kt)("p",null,"In case ",(0,r.kt)("inlineCode",{parentName:"p"},"type: String")," is passed, you can add optional ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," parameter that is an object. The table below represents options that you can pass in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#prefixvalue"},"prefix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suffix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#suffixvalue"},"suffix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class YourModel extends Entity<Keys>(tableName: string) { \n  ...\n  @gsiSortKey(String)\n  GSI_SK: string;\n  ...\n}\n")),(0,r.kt)("h2",{id:"lsisortkeytype-indexname-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"lsiSortKey(type, indexName, options?)")),(0,r.kt)("p",null,"This decorator is used to tag a local secondary index sort key attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"type: String | Number")," - Data type of the attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"indexName: string")," - Name of the index for the sort key."),(0,r.kt)("p",null,"In case ",(0,r.kt)("inlineCode",{parentName:"p"},"type: String")," is passed, you can add optional ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," parameter that is an object. The table below represents options that you can pass in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#prefixvalue"},"prefix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suffix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#suffixvalue"},"suffix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class YourModel extends Entity<Keys>(tableName: string) { \n  ...\n  @lsiSortKey(String)\n  LSI_SK: string;\n  ...\n}\n")),(0,r.kt)("h2",{id:"attributetype-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"attribute(type, options?)")),(0,r.kt)("p",null,"This decorator is used to tag a non partition/sort key attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"type: String | Number | Boolean | Object | Array | Set | Map")," - Data type of the attribute."),(0,r.kt)("p",null,"In case ",(0,r.kt)("inlineCode",{parentName:"p"},"type: String")," is passed, you can add optional ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," parameter that is an object. The table below represents options that you can pass in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#prefixvalue"},"prefix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suffix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#suffixvalue"},"suffix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class YourModel extends Entity<Keys>(tableName: string) { \n  ...\n  @attribute(String)\n  attr1: string;\n  ...\n  @attribute(Boolean)\n  attr2: boolean;\n  ...\n  @attribute(Set)\n  attr3: Set<number>;\n  ...\n}\n")),(0,r.kt)("h2",{id:"createdattype-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"createdAt(type, options?)")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"createdAt(type, options?)")," can be used once for a single entity. ")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"createdAt(type, options?)")," has to decorate attribute of ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},(0,r.kt)("inlineCode",{parentName:"a"},"Date"))," type.")),(0,r.kt)("p",null,"This decorator is used to tag an attribute that holds a ",(0,r.kt)("inlineCode",{parentName:"p"},"createdAt")," timestamp (moment when item is inserted to the table)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"type: String | Number")," - Data type of the attribute. Decorated ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," is saved to DynamoDB in ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unix_time"},"Unix timestamp")," format for ",(0,r.kt)("inlineCode",{parentName:"p"},"type: Number")," and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601")," format for ",(0,r.kt)("inlineCode",{parentName:"p"},"type: String"),"."),(0,r.kt)("p",null,"In case ",(0,r.kt)("inlineCode",{parentName:"p"},"type: String")," is passed, you can add optional ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," parameter that is an object. The table below represents options that you can pass in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#prefixvalue"},"prefix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suffix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#suffixvalue"},"suffix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class YourModel extends Entity<Keys>(tableName: string) { \n  ...\n  @createdAt(String)\n  CREATED_AT: string; // saved as ISO 8601: '2022-10-18T20:36:20.511Z'\n  ...\n}\n")),(0,r.kt)("h2",{id:"updatedattype-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"updatedAt(type, options?)")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"updatedAt(type, options?)")," can be used once for a single entity. ")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"updatedAt(type, options?)")," has to decorate attribute of ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},(0,r.kt)("inlineCode",{parentName:"a"},"Date"))," type.")),(0,r.kt)("p",null,"This decorator is used to tag an attribute that holds a ",(0,r.kt)("inlineCode",{parentName:"p"},"updatedAt")," timestamp (moment when item was last updated)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"type: String | Number")," - Data type of the attribute. Decorated ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," is saved to DynamoDB in ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unix_time"},"Unix timestamp")," format for ",(0,r.kt)("inlineCode",{parentName:"p"},"type: Number")," and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601")," format for ",(0,r.kt)("inlineCode",{parentName:"p"},"type: String"),"."),(0,r.kt)("p",null,"In case ",(0,r.kt)("inlineCode",{parentName:"p"},"type: String")," is passed, you can add optional ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," parameter that is an object. The table below represents options that you can pass in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#prefixvalue"},"prefix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suffix")),(0,r.kt)("td",{parentName:"tr",align:null},"Shortcut for ",(0,r.kt)("a",{parentName:"td",href:"/docs/guide/entity/decorators#suffixvalue"},"suffix(value)")," decorator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class YourModel extends Entity<Keys>(tableName: string) { \n  ...\n  @updatedAt(Number)\n  UPDATED_AT: number; // saved as Unix timestamp: 1666125293\n  ...\n}\n")),(0,r.kt)("h2",{id:"prefixvalue"},(0,r.kt)("inlineCode",{parentName:"h2"},"prefix(value)")),(0,r.kt)("p",null,"This decorator is used to add a static prefix to the value (only for attributes of ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," type). You can customize a separator that is added between prefix and actual value in ",(0,r.kt)("inlineCode",{parentName:"p"},"Settings"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"value: string")," - String that will be prepended to the value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class YourModel extends Entity<Keys>(tableName: string) { \n  ...\n  @prefix(\"attr_prefix\")\n  @attribute(String)\n  attr: string; // for 'attr_value' -> 'attr_prefix#attr_value'\n  ...\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Prefix is added whenever you interact with a attribute."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"All Entity static methods (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"Entity.get()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Entity.update()"),")"),(0,r.kt)("li",{parentName:"ul"},"Condition, Query and Scan builders"),(0,r.kt)("li",{parentName:"ul"},"transactionGet and transactionWrite"))),(0,r.kt)("h2",{id:"suffixvalue"},(0,r.kt)("inlineCode",{parentName:"h2"},"suffix(value)")),(0,r.kt)("p",null,"This decorator is used to add a static suffix to the value (only for attributes of ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," type). You can customize a separator that is added between actual value and suffix in ",(0,r.kt)("inlineCode",{parentName:"p"},"Settings"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"value: string")," - String that will be appended to the value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class YourModel extends Entity<Keys>(tableName: string) { \n  ...\n  @suffix(\"attr_suffix\")\n  @attribute(String)\n  attr: string; // for 'attr_value' -> 'attr_value#attr_suffix'\n  ...\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Suffix is added whenever you interact with a attribute."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"All Entity static methods (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"Entity.get()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Entity.update()"),")"),(0,r.kt)("li",{parentName:"ul"},"Condition, Query and Scan builders"),(0,r.kt)("li",{parentName:"ul"},"transactionGet and transactionWrite"))))}u.isMDXComponent=!0}}]);