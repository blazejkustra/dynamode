"use strict";(self.webpackChunkdynamode_docs=self.webpackChunkdynamode_docs||[]).push([[957],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,y=p["".concat(s,".").concat(m)]||p[m]||c[m]||o;return a?n.createElement(y,l(l({ref:t},d),{},{components:a})):n.createElement(y,l({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(6010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(7462),r=a(7294),o=a(6010),l=a(2389),i=a(7392),s=a(7094),u=a(2466);const d="tabList__CuJ",c="tabItem_LNqP";function p(e){var t;const{lazy:a,block:l,defaultValue:p,values:m,groupId:y,className:k}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,i.l)(h,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===p?p:p??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==f&&!h.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,s.U)(),[N,T]=(0,r.useState)(f),D=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=y){const e=v[y];null!=e&&e!==N&&h.some((t=>t.value===e))&&T(e)}const _=e=>{const t=e.currentTarget,a=D.indexOf(t),n=h[a].value;n!==N&&(O(t),T(n),null!=y&&w(y,String(n)))},E=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=D.indexOf(e.currentTarget)+1;a=D[t]??D[0];break}case"ArrowLeft":{const t=D.indexOf(e.currentTarget)-1;a=D[t]??D[D.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},k)},h.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>D.push(e),onKeyDown:E,onFocus:_,onClick:_},l,{className:(0,o.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":N===t})}),a??t)}))),a?(0,r.cloneElement)(g.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,l.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},5612:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var n=a(7462),r=(a(7294),a(3905)),o=a(5488),l=a(5162);const i={title:"Quick Start | Dynamode",description:"Quick Start",sidebar_label:"Quick Start",hide_title:!0},s="Quick Start",u={unversionedId:"getting_started/quick_start",id:"getting_started/quick_start",title:"Quick Start | Dynamode",description:"Quick Start",source:"@site/docs/getting_started/quick_start.mdx",sourceDirName:"getting_started",slug:"/getting_started/quick_start",permalink:"/dynamode/docs/getting_started/quick_start",draft:!1,editUrl:"https://www.github.com/blazejkustra/dynamode/tree/main/docs/docs/getting_started/quick_start.mdx",tags:[],version:"current",frontMatter:{title:"Quick Start | Dynamode",description:"Quick Start",sidebar_label:"Quick Start",hide_title:!0},sidebar:"sidebar",previous:{title:"Installation",permalink:"/dynamode/docs/getting_started/installation"},next:{title:"Import",permalink:"/dynamode/docs/getting_started/import"}},d={},c=[{value:"Installation",id:"installation",level:2},{value:"Setting up DynamoDB",id:"setting-up-dynamodb",level:2},{value:"Connect to DynamoDB",id:"connect-to-dynamodb",level:2},{value:"Create a table",id:"create-a-table",level:2},{value:"Create your model",id:"create-your-model",level:2},{value:"Save your model in the database",id:"save-your-model-in-the-database",level:2},{value:"Fetch your model from the database",id:"fetch-your-model-from-the-database",level:2},{value:"Congratulations!",id:"congratulations",level:2}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start"},"Quick Start"),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"First be sure to have Node.js installed, initialize a new project with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm init"),". Next install Dynamode by running the following command."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",label:"npm",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install dynamode\n"))),(0,r.kt)(l.Z,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add dynamode\n"))),(0,r.kt)(l.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm add dynamode\n")))),(0,r.kt)("h2",{id:"setting-up-dynamodb"},"Setting up DynamoDB"),(0,r.kt)("p",null,"To setup DynamoDB locally use the following ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html"},"guide"),". This way you can test your application without incurring any costs."),(0,r.kt)("h2",{id:"connect-to-dynamodb"},"Connect to DynamoDB"),(0,r.kt)("p",null,"At the top of your file, import Dynamode and connect to local DynamoDB instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import Dynamode from 'dynamode/dynamode';\n\nDynamode.ddb.local();\n")),(0,r.kt)("p",null,"In a real-world scenario, you would authenticate with AWS. For more information, check out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting_started/configure#authenticate-programmatically"},"Configure")," section. "),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Always authenticate at the top/beginning of your application.")),(0,r.kt)("h2",{id:"create-a-table"},"Create a table"),(0,r.kt)("p",null,"With Dynamode, everything is derived from an ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/entity/modeling#modeling-with-typescript"},"Entity"),". Let's import it and define our table with a ",(0,r.kt)("a",{parentName:"p",href:"https://repost.aws/knowledge-center/primary-key-dynamodb-table"},"composite primary key"),". "),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"In case you are using TypeScript, you need to add following lines in ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," in order to use decorators:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  "compilerOptions": {\n    ...\n    "experimentalDecorators": true,\n    ...\n  }\n}\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import attribute from 'dynamode/decorators';\nimport Entity from 'dynamode/entity';\n\nexport default class Table extends Entity {\n  @attribute.partitionKey.string()\n  pk: string;\n\n  @attribute.sortKey.string()\n  sk: string;\n\n  constructor(props: { pk: string; sk: string; }) {\n    super(props);\n\n    this.pk = props.pk;\n    this.sk = props.sk;\n  }\n}\n\n")),(0,r.kt)("p",null,"Every attribute you want to save in database should be defined as a class property with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@attribute")," decorator. You can read more about it ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/entity/decorators"},"here"),". "),(0,r.kt)("p",null,"Now, let's initialize a ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/managers/tableManager"},"table manager")," that will allow us to create the table in DynamoDB."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import TableManager from 'dynamode/table';\n\nconst FirstTableManager = new TableManager(Table, {\n  tableName: 'TABLE_NAME',\n  partitionKey: 'pk', // attribute that will be used as the partition key\n  sortKey: 'sk', // attribute that will be used as the sort key\n});\n")),(0,r.kt)("p",null,"You can create the table by running the following command. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await FirstTableManager.createTable();\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You only need to run this command once.")),(0,r.kt)("h2",{id:"create-your-model"},"Create your model"),(0,r.kt)("p",null,"Let's say we like kittens and want to record every kitten we ever meet. In order to create a model for our kitten, we will create a class that extends the ",(0,r.kt)("inlineCode",{parentName:"p"},"Table")," class. You can add any methods you want to this class, and use later on."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class Kitten extends Table {\n  @attribute.string()\n  name: string;\n\n  constructor(props: { pk: string; sk: string; name: string }) {\n    super(props);\n\n    this.name = props.name;\n  }\n\n  speak() {\n    return `Meow, my name is ${this.name}!`;\n  }\n}\n")),(0,r.kt)("p",null,"A model is a class with which we construct items. In this case, each item will be a kitten with properties and behaviors as declared in our class. Let's create a kitten item representing the little guy we just met on the sidewalk outside:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const fluffball = new Kitten({ \n    pk:'kitten', \n    sk:'fluffball', \n    name: 'Fluffball' \n  });\nconsole.log(fluffball.name); // 'Fluffball'\nconsole.log(fluffball.speak()); // 'Meow, my name is Fluffball!'\n")),(0,r.kt)("h2",{id:"save-your-model-in-the-database"},"Save your model in the database"),(0,r.kt)("p",null,"This item is not yet saved in the database. To save it, we need to create an ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/managers/entityManager"},"entity manager")," for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Kitten")," model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const KittenManager = FirstTableManager.entityManager(Kitten);\n")),(0,r.kt)("p",null,"Now that we have a kitten and a manager, we can save it in the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await KittenManager.put(fluffball);\n")),(0,r.kt)("h2",{id:"fetch-your-model-from-the-database"},"Fetch your model from the database"),(0,r.kt)("p",null,"You can also use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/managers/entityManager#entitymanagergetprimarykey-options"},(0,r.kt)("inlineCode",{parentName:"a"},"get")," method")," to fetch the kitten from the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const fluffball = await KittenManager.get({ pk: 'kitten', sk: 'fluffball' });\n")),(0,r.kt)("p",null,"Say time goes by and we want to display all the kittens we've seen. We can access all of the kittens we've seen by using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/query"},(0,r.kt)("inlineCode",{parentName:"a"},"query")," method"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const data = await KittenManager.query().partitionKey('pk').eq('kitten').run();\n")),(0,r.kt)("p",null,"You can also add filters to your query if you want to query all kittens with name that begins with 'fluff'."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const data = await KittenManager.query().partitionKey('pk').eq('kitten').sortKey('sk').beginsWith('fluff').run();\n")),(0,r.kt)("h2",{id:"congratulations"},"Congratulations!"),(0,r.kt)("p",null,"That's the end of our quick start. We connected to a DynamoDB instance, created a table and a model, added a custom method to a model, saved and queried kittens in DynamoDB using Dynamode."),(0,r.kt)("p",null,"Now, head over to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/guide/entity/modeling"},"guide")," for more info on how to model your data with Dynamode!"))}m.isMDXComponent=!0}}]);