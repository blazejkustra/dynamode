"use strict";(self.webpackChunkdynamode_docs=self.webpackChunkdynamode_docs||[]).push([[414],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,y=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(y,s(s({ref:t},u),{},{components:n})):a.createElement(y,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={title:"Scan | Dynamode",description:"Scan",sidebar_label:"Scan",hide_title:!0},s="Scan",o={unversionedId:"guide/scan",id:"guide/scan",title:"Scan | Dynamode",description:"Scan",source:"@site/docs/guide/scan.mdx",sourceDirName:"guide",slug:"/guide/scan",permalink:"/dynamode/docs/guide/scan",draft:!1,editUrl:"https://github.com/blazejkustra/dynamode/tree/master/docs/docs/guide/scan.mdx",tags:[],version:"current",frontMatter:{title:"Scan | Dynamode",description:"Scan",sidebar_label:"Scan",hide_title:!0},sidebar:"sidebar",previous:{title:"Query",permalink:"/dynamode/docs/guide/query"},next:{title:"Transactions",permalink:"/dynamode/docs/guide/transactions"}},c={},l=[{value:"<code>Scan.indexName(name)</code>",id:"scanindexnamename",level:2},{value:"<code>Scan.segment(value)</code>",id:"scansegmentvalue",level:2},{value:"<code>Scan.totalSegments(value)</code>",id:"scantotalsegmentsvalue",level:2},{value:"<code>Scan.limit(count)</code>",id:"scanlimitcount",level:2},{value:"<code>Scan.startAt(key)</code>",id:"scanstartatkey",level:2},{value:"<code>Scan.consistent()</code>",id:"scanconsistent",level:2},{value:"<code>Scan.count()</code>",id:"scancount",level:2},{value:"<code>Scan.attributes(attributes)</code>",id:"scanattributesattributes",level:2},{value:"<code>Scan.run(options?)</code>",id:"scanrunoptions",level:2}],u={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"scan"},"Scan"),(0,r.kt)("h2",{id:"scanindexnamename"},(0,r.kt)("inlineCode",{parentName:"h2"},"Scan.indexName(name)")),(0,r.kt)("h2",{id:"scansegmentvalue"},(0,r.kt)("inlineCode",{parentName:"h2"},"Scan.segment(value)")),(0,r.kt)("h2",{id:"scantotalsegmentsvalue"},(0,r.kt)("inlineCode",{parentName:"h2"},"Scan.totalSegments(value)")),(0,r.kt)("h2",{id:"scanlimitcount"},(0,r.kt)("inlineCode",{parentName:"h2"},"Scan.limit(count)")),(0,r.kt)("p",null,"This method will limit the number of items that DynamoDB scan in one request. It uses DynamoDB's ",(0,r.kt)("inlineCode",{parentName:"p"},"Limit"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Unlike most SQL databases ",(0,r.kt)("strong",{parentName:"p"},"this does not guarantee the response will contain 5 items"),". DynamoDB will only scan a maximum of 5 items and check if they match and should be returned.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," argument should be a ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," representing how many items you wish DynamoDB to scan."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const response = await User.scan().partitionKey('partitionKey').eq('1').limit(10).run(); // Resulting in: `Limit: 10`\n")),(0,r.kt)("h2",{id:"scanstartatkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"Scan.startAt(key)")),(0,r.kt)("p",null,"In case there are more items to retrieve in a previous scan response, Dynamode will return ",(0,r.kt)("inlineCode",{parentName:"p"},"lastKey")," property with primary key of last evaluated item. You can pass this property to further scan your items. It uses DynamoDB's ",(0,r.kt)("inlineCode",{parentName:"p"},"LastEvaluatedKey"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const response1 = await User.scan().partitionKey('partitionKey').eq('1').run(); \nconst response2 = await User.scan().partitionKey('partitionKey').eq('1').startAt(response1.lastKey).run(); // Resulting in: `LastEvaluatedKey: response1.lastKey`\n")),(0,r.kt)("h2",{id:"scanconsistent"},(0,r.kt)("inlineCode",{parentName:"h2"},"Scan.consistent()")),(0,r.kt)("p",null,"This will cause the scan to run a consistent read. By default read is eventually consistent. It uses DynamoDB's ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsistentRead"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const response = await User.scan().partitionKey('partitionKey').eq('1').consistent().run(); // Resulting in: `ConsistentRead: true`\n")),(0,r.kt)("h2",{id:"scancount"},(0,r.kt)("inlineCode",{parentName:"h2"},"Scan.count()")),(0,r.kt)("p",null,"Instead of returning an array of items, this method will make the scan operation to return an object with count information. This option saves bandwidth by using DynamoDB's ",(0,r.kt)("inlineCode",{parentName:"p"},"Select"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const response = await User.scan().partitionKey('partitionKey').eq('1').count().run(); // Resulting in: `Select: 'COUNT'`\n")),(0,r.kt)("h2",{id:"scanattributesattributes"},(0,r.kt)("inlineCode",{parentName:"h2"},"Scan.attributes(attributes)")),(0,r.kt)("p",null,"This method is used to tag what item attributes should be retrieved and returned. This uses DynamoDB's ",(0,r.kt)("inlineCode",{parentName:"p"},"ProjectionExpression"),". If this value is undefined, then all attributes will be returned. ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes")," argument should be an array of strings representing the property names to return."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const response = await User.scan().partitionKey('partitionKey').eq('1').attributes(['username', 'age']).run(); // Resulting in: `ProjectionExpression: 'username, age'`\n")),(0,r.kt)("h2",{id:"scanrunoptions"},(0,r.kt)("inlineCode",{parentName:"h2"},"Scan.run(options?)")))}d.isMDXComponent=!0}}]);